{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "abespark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/95a911b6-47f7-4a8b-be9b-c1c2bf56579b/resourceGroups/osomorog/providers/Microsoft.Synapse/workspaces/osomorogsynapse/bigDataPools/abespark",
				"name": "abespark",
				"type": "Spark",
				"endpoint": "https://osomorogsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/abespark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"import numpy as np\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"import azureml.core\r\n",
					"from azureml.core import Workspace\r\n",
					"from azureml.core import Experiment\r\n",
					"\r\n",
					"# connect to your workspace\r\n",
					"ws = Workspace.from_config()\r\n",
					"#ws = Workspace.get(name='AMLandDBWorkspace', subscription_id='95a911b6-47f7-4a8b-be9b-c1c2bf56579b', resource_group='MLPMetrics')\r\n",
					"\r\n",
					"# create experiment and start logging to a new run in the experiment\r\n",
					"experiment_name = \"azure-ml-in10-mins-tutorial\"\r\n",
					"exp = Experiment(workspace=ws, name=experiment_name)\r\n",
					"run = exp.start_logging(snapshot_directory=None)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from azureml.core import Experiment\r\n",
					"experiment = Experiment(workspace=ws, name=\"diabetes-experiment\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from azureml.opendatasets import Diabetes\r\n",
					"from sklearn.model_selection import train_test_split\r\n",
					"\r\n",
					"x_df = Diabetes.get_tabular_dataset().to_pandas_dataframe().dropna()\r\n",
					"y_df = x_df.pop(\"Y\")\r\n",
					"\r\n",
					"X_train, X_test, y_train, y_test = train_test_split(x_df, y_df, test_size=0.2, random_state=66)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from sklearn.linear_model import Ridge\r\n",
					"from sklearn.metrics import mean_squared_error\r\n",
					"from sklearn.externals import joblib\r\n",
					"import math\r\n",
					"\r\n",
					"alphas = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\r\n",
					"\r\n",
					"for alpha in alphas:\r\n",
					"    run = experiment.start_logging()\r\n",
					"    run.log(\"alpha_value\", alpha)\r\n",
					"    \r\n",
					"    model = Ridge(alpha=alpha)\r\n",
					"    model.fit(X=X_train, y=y_train)\r\n",
					"    y_pred = model.predict(X=X_test)\r\n",
					"    rmse = math.sqrt(mean_squared_error(y_true=y_test, y_pred=y_pred))\r\n",
					"    run.log(\"rmse\", rmse)\r\n",
					"    \r\n",
					"    model_name = \"model_alpha_\" + str(alpha) + \".pkl\"\r\n",
					"    filename = \"outputs/\" + model_name\r\n",
					"    \r\n",
					"    joblib.dump(value=model, filename=filename)\r\n",
					"    run.upload_file(name=model_name, path_or_stream=filename)\r\n",
					"    run.complete()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"experiment"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"minimum_rmse_runid = None\r\n",
					"minimum_rmse = None\r\n",
					"\r\n",
					"for run in experiment.get_runs():\r\n",
					"    run_metrics = run.get_metrics()\r\n",
					"    run_details = run.get_details()\r\n",
					"    # each logged metric becomes a key in this returned dict\r\n",
					"    run_rmse = run_metrics[\"rmse\"]\r\n",
					"    run_id = run_details[\"runId\"]\r\n",
					"    \r\n",
					"    if minimum_rmse is None:\r\n",
					"        minimum_rmse = run_rmse\r\n",
					"        minimum_rmse_runid = run_id\r\n",
					"    else:\r\n",
					"        if run_rmse < minimum_rmse:\r\n",
					"            minimum_rmse = run_rmse\r\n",
					"            minimum_rmse_runid = run_id\r\n",
					"\r\n",
					"print(\"Best run_id: \" + minimum_rmse_runid)\r\n",
					"print(\"Best run_id rmse: \" + str(minimum_rmse))    "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from azureml.core import Run\r\n",
					"best_run = Run(experiment=experiment, run_id=minimum_rmse_runid)\r\n",
					"print(best_run.get_file_names())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"best_run.download_file(name=\"model_alpha_0.1.pkl\")"
				],
				"execution_count": null
			}
		]
	}
}